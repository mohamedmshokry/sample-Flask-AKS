pipeline {
    agent any

    environment {
        ACR_NAME = 'aksflaskdemo'                              // ACR name
        ACR_RESOURCE_GROUP = 'aks-demo'                        // Resource group for ACR
        DOCKER_IMAGE_NAME = 'sampleflask'                      // Docker image name
        DOCKERFILE_PATH = 'Dockerfile'                         // Path to Dockerfile
        IMAGE_TAG = "${env.BUILD_ID}"                          // Tag the image with the Jenkins build ID
    }

    stages {
        stage('Retrieve Azure Secrets') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'e29f2ed9-34b3-4283-b37a-3257e1f5aa72', variable: 'AZURE_CLIENT_ID'),
                        string(credentialsId: '88d71be1-48d6-4a25-b691-09cc3544495f', variable: 'AZURE_CLIENT_SECRET'),
                        string(credentialsId: '6089b26a-02d4-477f-9fad-231ac4bd130e', variable: 'AZURE_TENANT_ID'),
                        string(credentialsId: 'dd4f58bd-a1df-4fd4-a8fb-f33f15efba78', variable: 'AZURE_SUBSCRIPTION_ID')
                    ]) {
                        // Make these variables accessible globally within the pipeline
                        env.AZURE_CLIENT_ID = "${AZURE_CLIENT_ID}"
                        env.AZURE_CLIENT_SECRET = "${AZURE_CLIENT_SECRET}"
                        env.AZURE_TENANT_ID = "${AZURE_TENANT_ID}"
                        env.AZURE_SUBSCRIPTION_ID = "${AZURE_SUBSCRIPTION_ID}"
                    }
                }
            }
        }

        stage('Checkout Code') {
            steps {
                git url: 'https://github.com/mohamedmshokry/sample-Flask-AKS.git', branch: 'main'
            }
        }

        stage('Install Azure CLI') {
            steps {
                script {
                    def azureInstalled = sh(script: 'az --version', returnStatus: true)
                    if (azureInstalled != 0) {
                        sh 'curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash'
                    } else {
                        echo 'Azure CLI is already installed.'
                    }
                }
            }
        }

        stage('Install Docker') {
            steps {
                script {
                    def dockerInstalled = sh(script: 'docker --version', returnStatus: true)
                    if (dockerInstalled != 0) {
                        sh '''
                        sudo apt-get update
                        sudo apt-get install -y docker.io
                        sudo systemctl start docker
                        sudo systemctl enable docker
                        sudo usermod -aG docker $(whoami)
                        newgrp docker
                        '''
                    } else {
                        echo 'Docker is already installed.'
                    }
                }
            }
        }

        stage('Login to Azure') {
            steps {
                sh '''
                az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                az account set --subscription $AZURE_SUBSCRIPTION_ID
                '''
            }
        }

        stage('Login to ACR') {
            steps {
                script {
                    def acrLoginServer = sh(script: "az acr show --resource-group ${ACR_RESOURCE_GROUP} --name ${ACR_NAME} --query 'loginServer' --output tsv", returnStdout: true).trim()
                    sh "az acr login --name ${ACR_NAME}"
                    env.FULL_IMAGE_TAG = "${acrLoginServer}/${DOCKER_IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    sh "docker build -t ${env.FULL_IMAGE_TAG} -f ${DOCKERFILE_PATH} ."
                    sh "docker push ${env.FULL_IMAGE_TAG}"
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up resources...'
        }
        success {
            echo 'Build and Push successful!'
        }
        failure {
            echo 'Build failed.'
        }
    }
}